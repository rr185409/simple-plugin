/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */
buildscript {
   
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"


		}
}
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'maven-publish'
    id "com.jfrog.artifactory" version "4.24.18"
     id 'java-gradle-plugin'
     id  "nebula.release" version "16.0.0"
     
  	id "com.dorongold.task-tree" version "2.1.0"
}
group = "com.ncr"

			



repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
     gradlePluginPortal()
}

def dependencyMap = [
	App:"com.ncr.Tools:Forms:0.8.0", 
	Simple:"com.ncr.Tools:Forms:1.2.0"
]
def dependency = ""
dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation "com.dorongold.plugins:task-tree:2.1.0"
    		def pluginName = ""
			if(project.hasProperty("pluginName")) {
				
				if(dependencyMap[project.property("pluginName")]){
					dependency = dependencyMap[project.property("pluginName")]
					implementation dependency
				} else {
					project.logger.info( "There is no adding dependency.")
				}
				
				
			} else {
				project.logger.error('Property pluginName has to be provided.')
			}
}

application {
    // Define the main class for the application.
    mainClass = 'com.ncr.plugins.SimplePluginMain'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


gradlePlugin {
    // Define the plugin
    plugins {
        Simple {
            id = 'com.ncr.plugins.simple'
            implementationClass = 'com.ncr.plugins.SimplePlugin'
		}
		App {
            id = 'com.ncr.plugins.app'
            implementationClass = 'com.ncr.plugins.AppPlugin'
		}
		AppNoDep {
            id = 'com.ncr.plugins.appnodep'
            implementationClass = 'com.ncr.plugins.AppNoDepPlugin'
		}
	}
}



repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
            url 'https://ncr.jfrog.io/artifactory/aptra-tcs-gradle-releases'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
            
            metadataSources {
            mavenPom()
            artifact()
        	}
        }
}
artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver

    publish {
     repository {
            repoKey = 'tcs-demo-gradle-public'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
            
        }
        
		def marker =""
        defaults {
			        if(project.hasProperty("pluginName")) {
						marker = project.property("pluginName")+"PluginMarkerMaven"
						project.logger.info(marker)
			        } else {
						project.logger.error('Property pluginName has to be provided.')
			
					}
			        
            publications(
           	marker,
            "buildMaven")
            publishBuildInfo = false

        }
    }
    resolve {
        repository {
            repoKey = 'tcs-demo-gradle-public'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
            
        }
    }
    
}
publishing {
	publications {
    	buildMaven(MavenPublication) {
        	from components.java
		} 
	}
}


abstract class DownloadDependency extends DefaultTask {
  @TaskAction
  def downloadDependency() {
		
  }
}